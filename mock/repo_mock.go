// Code generated by MockGen. DO NOT EDIT.
// Source: interface/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIMongoRepository is a mock of IMongoRepository interface.
type MockIMongoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoRepositoryMockRecorder
}

// MockIMongoRepositoryMockRecorder is the mock recorder for MockIMongoRepository.
type MockIMongoRepositoryMockRecorder struct {
	mock *MockIMongoRepository
}

// NewMockIMongoRepository creates a new mock instance.
func NewMockIMongoRepository(ctrl *gomock.Controller) *MockIMongoRepository {
	mock := &MockIMongoRepository{ctrl: ctrl}
	mock.recorder = &MockIMongoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMongoRepository) EXPECT() *MockIMongoRepositoryMockRecorder {
	return m.recorder
}

// InsertOne mocks base method.
func (m *MockIMongoRepository) InsertOne(ctx context.Context, collection string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, collection, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockIMongoRepositoryMockRecorder) InsertOne(ctx, collection, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockIMongoRepository)(nil).InsertOne), ctx, collection, data)
}

// List mocks base method.
func (m *MockIMongoRepository) List(ctx context.Context, collection string, data interface{}, filter bson.M, page, pageSize int64, opts ...*options.FindOptions) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, data, filter, page, pageSize}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIMongoRepositoryMockRecorder) List(ctx, collection, data, filter, page, pageSize interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, data, filter, page, pageSize}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIMongoRepository)(nil).List), varargs...)
}

// ListAll mocks base method.
func (m *MockIMongoRepository) ListAll(ctx context.Context, collection string, data interface{}, filter bson.M, opts ...*options.FindOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, data, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAll", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAll indicates an expected call of ListAll.
func (mr *MockIMongoRepositoryMockRecorder) ListAll(ctx, collection, data, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, data, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockIMongoRepository)(nil).ListAll), varargs...)
}
