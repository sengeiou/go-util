// Code generated by MockGen. DO NOT EDIT.
// Source: interface/etcd.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// MockIEtcd is a mock of IEtcd interface.
type MockIEtcd struct {
	ctrl     *gomock.Controller
	recorder *MockIEtcdMockRecorder
}

// MockIEtcdMockRecorder is the mock recorder for MockIEtcd.
type MockIEtcdMockRecorder struct {
	mock *MockIEtcd
}

// NewMockIEtcd creates a new mock instance.
func NewMockIEtcd(ctrl *gomock.Controller) *MockIEtcd {
	mock := &MockIEtcd{ctrl: ctrl}
	mock.recorder = &MockIEtcdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEtcd) EXPECT() *MockIEtcdMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIEtcd) Get(ctx context.Context, key string, opts ...clientv3.OpOption) (*clientv3.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*clientv3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEtcdMockRecorder) Get(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEtcd)(nil).Get), varargs...)
}

// LeaseGrant mocks base method.
func (m *MockIEtcd) LeaseGrant(ctx context.Context, ttl int64) (*clientv3.LeaseGrantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaseGrant", ctx, ttl)
	ret0, _ := ret[0].(*clientv3.LeaseGrantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaseGrant indicates an expected call of LeaseGrant.
func (mr *MockIEtcdMockRecorder) LeaseGrant(ctx, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaseGrant", reflect.TypeOf((*MockIEtcd)(nil).LeaseGrant), ctx, ttl)
}

// Put mocks base method.
func (m *MockIEtcd) Put(ctx context.Context, key, value string, opts ...clientv3.OpOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockIEtcdMockRecorder) Put(ctx, key, value interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIEtcd)(nil).Put), varargs...)
}
